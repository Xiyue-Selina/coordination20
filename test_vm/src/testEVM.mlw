(*
module UInt256
	use mach.int.Unsigned
	type uint256
	constant max_uint256: int = 0xffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff
	clone export mach.int.Unsigned with
		type t = uint256,
		constant max = max_uint256
end

module UInt160
	use mach.int.Unsigned
	type uint160
	constant max_uint160: int = 0xffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff
	clone export mach.int.Unsigned with
		type t = uint160,
		constant max = max_uint160
end

module UInt8
	use mach.int.Unsigned
	type uint8
	constant max_uint8: int = 0xff
	clone export mach.int.Unsigned with
		type t = uint8,
		constant max = max_uint8
	(*function uint8_to_int (x: uint8): int= uint8'int x*)
	(*val uint8_to_int (n: uint8) : int
	 ensures {result = n}
	val uint8_of_int (n: int): uint8 
	requires { in_bounds n }
	ensures { result = n } 
*)
	(*function uint8_of_int (x: int): uint8*)
end
module UInt4
	use mach.int.Unsigned
	type uint4
	constant max_uint4: int = 0xf
	clone export mach.int.Unsigned with
		type t = uint4,
		constant max = max_uint4
	(*function uint4_to_int (x: uint4): int= uint4'int x*)
	(*val uint4_to_int (n: uint4) : int
	 ensures {result = n}
	val uint4_of_int (n: int): uint4 
	requires { in_bounds n }
	ensures { result = n } 
*)
	(*function uint4_of_int (x: int): uint4*)
end
*)

module EVM
(* Focus on machine state: Program Counter, Gas Available, Stack Contents, Memory Contents which are volatile Machine state;
with the account storage as persistent world state *)

(* the library support *)
use array.Array
use int.Int (* Arithmetic *)
use int.Power
use list.ListRich (* combo theory that includes all list operations like length, reversal, and concatenation *)
use option.Option
use map.Map
use int.ComputerDivision
(*
use UInt256
use UInt160
use UInt8
use UInt4
use mach.int.Unsigned
*)
(* Use clear alias for commonly-used type *)


(* 32-bit and 64-bit signed and unsigned integers ([Int32], [UInt32], [Int64], and [UInt64]) as well as 31-bit and 
63-bit signed integers ([Int31] and [Int63] have been instantiated *)
(* They can be transformed using to_int and of_int, which can be further encapsulated for other transformation between type *) 
(*
type byte = uint8
type address = uint160
type machword = uint256
*)
(* Set explicit type transformation, such as machword to address, machword to byte in each newly-built library,
encapsulated as a direct function, e.g. to_int and of_int to a function *)

(* memory: word addressed byte array *)
(* stack: one way of model is modeled as list uint256, with a maximum size of 1024 *)
(* storage(independent): word addressed word array, maintained as part of the system state *)

(* Enumeration type*)
type memory_content = 
   | Item8 int
   | Item256 int

  
type memory = int -> option memory_content

type stack = list int
type storage = int -> int (* machine word -> machine word *)

(* EVM status *)


type error =
    | OutOfBounds
    | OutOfGas
    | OutOfStack
    | OutOfCode
    | OutOfData
    | InvalidOpcode

type return_type =
  | Normal int
  | Create int
  | Revert

type vmstatus =
  | Running
  | Error error
  | Finish return_type
(* EVM Operations *)

(* Record the number of items required on the stack and returned to the stack for a given operation *)
type st_num = (int, int)

(* Bits *)
type bits_inst =
    | AND  
    | OR
    | XOR
    | NOT
    | BYTE (* Retrieve single byte from word *)


let bit_inst_opcode (inst: bits_inst): int =
    match inst with 
        | AND -> 0X16
        | OR -> 0X17
        | XOR -> 0X18
        | NOT -> 0X19
        | BYTE -> 0X1a
    end

let bit_inst_num (inst: bits_inst): st_num =
    match inst with 
        | AND -> (2, 1)
        | OR -> (2, 1)
        | XOR -> (2, 1)
        | NOT -> (1, 1)
        | BYTE -> (2, 1)
    end

(* Signed Arithmetics *)
type sign_arith_inst =
| SDIV
| SMOD
| SLT
| SGT
| SIGNEXTEND (* Extend length of two's complement signed integer *)

let sign_arith_inst_opcode (inst: sign_arith_inst): int =
match inst with 
| SDIV -> 0X05 (*  Signed integer division operation (truncated) *)
| SMOD -> 0X07
| SLT -> 0X12
| SGT -> 0X13
| SIGNEXTEND -> 0X0b 
end   

let sign_arith_inst_num (inst: sign_arith_inst): st_num =
match inst with 
| SDIV -> (2, 1)
| SMOD -> (2, 1)
| SLT -> (2, 1)
| SGT -> (2, 1)
| SIGNEXTEND -> (2, 1)
end   
          
(* Unsigned Arithmetics *)
type arith_inst =
| ADD
| MUL
| SUB
| DIV
| MOD
| ADDMOD (*  Modulo addition operation. *)
| MULMOD (*  Modulo multiplication operation. *)
| EXP (* Exponential operation. *)
| LT
| GT
| EQ
| ISZERO
| SHA3

let arith_inst_opcode (inst: arith_inst): int =
match inst with 
| ADD -> 0X01
| MUL -> 0X02
| SUB -> 0X03
| DIV -> 0X04
| MOD -> 0X06
| ADDMOD -> 0X08
| MULMOD -> 0X09
| EXP -> 0X0a
| LT -> 0X10
| GT -> 0X11
| EQ -> 0X14
| ISZERO -> 0X15
| SHA3 -> 0X20
end

let arith_inst_num (inst: arith_inst): st_num =
match inst with 
| ADD -> (2, 1)
| MUL -> (2, 1)
| SUB -> (2, 1)
| DIV -> (2, 1)
| MOD -> (2, 1)
| ADDMOD -> (3, 1)
| MULMOD -> (3, 1)
| EXP -> (2, 1)
| LT -> (2, 1)
| GT -> (2, 1)
| EQ -> (2, 1)
| ISZERO -> (1, 1)
| SHA3 -> (2, 1)
end

(* Information *)
type info_inst =
| ADDRESS
| BALANCE
| ORIGIN (* Get execution origination address.*)
| CALLER
| CALLVALUE
| CALLDATASIZE
| CODESIZE
| GASPRICE (* Get price of gas in current environment *)
| EXTCODESIZE (* Size of the code of a specified account *)
| RETURNDATASIZE (* Get size of output data from the previous call from the current environment *)
| RETURNDATACOPY (* Copy output data from the previous call to memory *)
| BLOCKHASH (* Get the hash of one of the 256 most recent complete blocks. *)
| COINBASE (* Get the blockâ€™s beneficiary address. *)
| TIMESTAMP
| NUMBER
| DIFFICULTY (* Get the block's difficulty *)
| GASLIMIT (*  Get the block's gas limit *)
| GAS


let info_inst_opcode (inst: info_inst): int =
match inst with
| ADDRESS -> 0X30
| BALANCE -> 0X31
| ORIGIN -> 0X32
| CALLER -> 0X33
| CALLVALUE -> 0X34
| CALLDATASIZE -> 0X36
| CODESIZE -> 0X38
| GASPRICE -> 0X3a
| EXTCODESIZE -> 0X3b
| RETURNDATASIZE -> 0X3d
| RETURNDATACOPY -> 0X3e
| BLOCKHASH -> 0X40
| COINBASE -> 0X41 
| TIMESTAMP -> 0X42
| NUMBER -> 0X43
| DIFFICULTY -> 0X44
| GASLIMIT -> 0X45
| GAS -> 0X5a
end

let info_inst_num (inst: info_inst): st_num =
match inst with
| ADDRESS -> (0, 1)
| BALANCE -> (1, 1)
| ORIGIN -> (0, 1)
| CALLER -> (0, 1)
| CALLVALUE -> (0, 1)
| CALLDATASIZE -> (0, 1)
| CODESIZE -> (0, 1)
| GASPRICE -> (0, 1)
| EXTCODESIZE -> (1, 1)
| RETURNDATASIZE -> (0, 1)
| RETURNDATACOPY -> (3, 0)
| BLOCKHASH -> (1, 1)
| COINBASE -> (0, 1) 
| TIMESTAMP -> (0, 1)
| NUMBER -> (0, 1)
| DIFFICULTY -> (0, 1)
| GASLIMIT -> (0, 1)
| GAS -> (0, 1)
end

(* Memory Operations *)
type memory_inst =
| MLOAD 
| MSTORE 
| MSTORE8 
| MSIZE (* the size of the currently used part of the memory *)
| CALLDATACOPY (* copy the caller's data to the memory *)
| CODECOPY (* copy part of the currently running code to the memory *)
| EXTCODECOPY (* copy part of the code of a specified account *)

let memory_inst_opcode (inst: memory_inst) : int =
match inst with 
| MLOAD -> 0X51 (* Load word from memory *)
| MSTORE -> 0X52 (* Save word to memory *)
| MSTORE8 -> 0X53 (* Save byte to memory *)
| MSIZE -> 0X59 (* the size of the currently used part of the memory *)
| CALLDATACOPY -> 0X37 (* copy the caller's data to the memory *)
| CODECOPY -> 0X39(* copy part of the currently running code to the memory *)
| EXTCODECOPY -> 0X3c(* copy part of the code of a specified account *)
end

let memory_inst_num (inst: memory_inst) : st_num =
match inst with 
| MLOAD -> (1, 1) 
| MSTORE -> (2, 0) 
| MSTORE8 -> (2, 0) 
| MSIZE -> (0, 1)(* Copy code running in current environment to memory *)
| CALLDATACOPY -> (3, 0) (* copy the caller's data to the memory *)
| CODECOPY -> (3, 0)(* copy part of the currently running code to the memory *)
| EXTCODECOPY -> (4, 0)(* copy part of the code of a specified account *)
end


(* Storage Operations *)
type storage_inst =
| SLOAD (*Load word from the storage *)
| SSTORE (* Save word to the storage *)

let storage_inst_opcode (inst: storage_inst): int = 
match inst with 
| SLOAD -> 0X54 (*Load word from the storage *)
| SSTORE -> 0X55 (* Save word to the storage *)
end

let storage_inst_num (inst: storage_inst): st_num = 
match inst with 
| SLOAD -> (1, 1)(*Load word from the storage *)
| SSTORE -> (2, 0) (* Save word to the storage *)
end

(*Program Counter Operation *)
type pc_inst =
 | JUMP (*  Alter the program counter. *)
 | JUMPI (* Conditionally alter the program counter. *)
 | PC (* the current location in the code *)
 | JUMPDEST (* indicate jump destinations. *)

let pc_inst_opcode (inst: pc_inst): int = 
match inst with
| JUMP -> 0X56
| JUMPI -> 0X57 (* Conditionally alter the program counter. *)
| PC -> 0X58 
| JUMPDEST -> 0X5b
end

let pc_inst_num (inst: pc_inst): st_num = match inst with
| JUMP -> (1, 0)
| JUMPI -> (2, 0)
| PC -> (0, 1)
| JUMPDEST -> (0, 0)
end


(* Stack Operations *)

(* 32 PUSH operations in total *)
(* The pushed value is represented by a list of bytes. *)

type stack_inst =
  | POP (* Remove item from stack *)
  | PUSH int (* pushing an element to the stack *) 
  | CALLDATALOAD (* push a word to the stack which is taken from the caller's data *)

exception PushError
(* TODO int and uint8 issue *)

let stack_inst_opcode (inst: stack_inst): list int
raises {PushError -> False}
= match inst with
| POP -> Cons 0X50 Nil
(*| PUSH machword ->
     if 1 <= length(lst) <= 32 then ((Cons ((length lst) + 0X5f) Nil) ++ lst) else raise PushError 
     (* opcode of the operation ++ the pushed value list *)*)
| CALLDATALOAD -> Cons 0X35 Nil
| _ -> absurd
end

let stack_inst_num (inst: stack_inst): st_num = match inst with
| POP -> (1, 0)
| PUSH _ -> (0, 1)
| CALLDATALOAD -> (1, 1)
end

(* The 16 insts for duplicating a stack element, take a stack element and copy it on top of the stack *)
type dup_inst = int

let dup_inst_opcode (inst: dup_inst): int =
(inst + 0X80) 

let dup_inst_num (inst: dup_inst): st_num =
(inst, ( inst) + 1 )

(* The 16 insts for taking a stack element and duplicate it on top of the stack.*)
type swap_inst = int

let swap_inst_opcode (inst: swap_inst): int =
  ((inst) + 0X90)

let swap_inst_num (inst: swap_inst): st_num =
(( inst) + 1, ( inst) + 1)

(* Logging Operations *)
(* The state change is to append an additional log entry on to the substateâ€™s log series *)
type log_inst =
| LOG0
| LOG1
| LOG2
| LOG3
| LOG4

let log_inst_opcode (inst: log_inst): int = match inst with
| LOG0 -> 0Xa0
| LOG1 -> 0Xa1
| LOG2 -> 0Xa2
| LOG3 -> 0Xa3
| LOG4 -> 0Xa4
end

let log_inst_num (inst: log_inst): st_num = match inst with
| LOG0 -> (2, 0)
| LOG1 -> (3, 0)
| LOG2 -> (4, 0)
| LOG3 -> (5, 0)
| LOG4 -> (6, 0)
end

(* System Operations *)
type system_inst =
  | STOP (* finishing the execution normally, with the empty return data *)
  | CREATE (* deploying some code in an account *)
  | CALL (* calling (i.e. sending a message to) an account *)
  | CALLCODE (* calling into this account, but the executed code can be some other account's *)
  | RETURN (* finishing the execution normally with data *)
  | DELEGATECALL (* calling into this account, the executed code can be some other account's
                       but the sent value and the sent data are unchanged. *)
  | STATICCALL (* Static message-call into an account.*)
  | REVERT (* Halt execution reverting state changes but returning data and remaining gas. *)                      
  | SELFDESTRUCT (* send all remaining Eth balance to the specified account, *)
            (* finishing the execution normally, and flagging the current account for deletion *)

let system_inst_opcode (inst: system_inst): int = 
match inst with
| STOP -> 0X00
| CREATE -> 0Xf0
| CALL -> 0Xf1
| CALLCODE -> 0Xf2
| RETURN -> 0Xf3
| DELEGATECALL -> 0Xf4
| STATICCALL -> 0Xfa
| REVERT -> 0Xfd
| SELFDESTRUCT -> 0Xff
end

let system_inst_num (inst: system_inst): st_num = match inst with
| STOP         -> (0, 0)
| CREATE       -> (3, 1)
| CALL         -> (7, 1)
| CALLCODE     -> (7, 1)
| RETURN       -> (2, 0)
| DELEGATECALL -> (6, 1)
| STATICCALL   -> (6, 1)
| REVERT       -> (2, 0)
| SELFDESTRUCT -> (1, 0)
end

(* Instruction Set *)
(* The previous operation sets above are here combined into a single type. *)

type instruction =
  | Bits bits_inst
  | Sarith sign_arith_inst
  | Arith arith_inst
  | Info info_inst
  | Dup dup_inst
  | Memory memory_inst
  | Storage storage_inst
  | Pc pc_inst
  | Stack stack_inst
  | Swap swap_inst
  | Log log_inst
  | System system_inst

(*let to_list m = 
match m with
 | None -> Nil
 | Some s -> [s]
end*)


let inst_opcode (inst: instruction): list int = 
match inst with
| Bits b -> Cons (bit_inst_opcode b) Nil
| Sarith s -> Cons (sign_arith_inst_opcode s) Nil
| Arith a -> Cons (arith_inst_opcode a) Nil
| Info i -> Cons (info_inst_opcode i) Nil
| Dup d -> Cons (dup_inst_opcode d) Nil
| Memory m -> Cons (memory_inst_opcode m) Nil
| Storage s -> Cons (storage_inst_opcode s) Nil
| Pc p -> Cons (pc_inst_opcode p) Nil
| Stack s -> stack_inst_opcode s
| Swap s -> Cons (swap_inst_opcode s) Nil
| Log l -> Cons (log_inst_opcode l) Nil
| System m -> Cons (system_inst_opcode m) Nil
end


let inst_stack_num (inst: instruction): st_num = match inst with
| Bits b -> bit_inst_num b
| Sarith s -> sign_arith_inst_num s
| Arith a -> arith_inst_num a
| Info i -> info_inst_num i
| Dup d -> dup_inst_num d
| Memory m -> memory_inst_num m
| Storage s -> storage_inst_num s
| Pc p -> pc_inst_num p
| Stack s -> stack_inst_num s
| Swap s -> swap_inst_num s
| Log l -> log_inst_num l
| System m -> system_inst_num m
end






(* Gas mechanism (Fee schedule) *)


constant g_zero: int = 0
constant g_base: int = 2
constant g_verylow: int = 3
constant g_low: int = 5
constant g_mid: int = 8
constant g_high: int = 10
constant g_extcode: int = 700 (* Amount of gas to pay for operations of the set Wextcode *)


let gas_of_Wzero (inst: instruction) : int =
  match inst with
    | System STOP 
    | System RETURN 
    | System REVERT -> 0
    | _ -> absurd
    end


let gas_of_Wlow (inst: instruction) : int =
  match inst with
    | Arith MUL 
    | Arith DIV
    | Sarith SDIV
    | Arith MOD
    | Sarith SMOD
    | Sarith SIGNEXTEND -> 5
    | _ -> absurd
    end
  

constant g_balance: int = 400
constant g_sload: int = 200
constant g_jumpdest: int = 1
constant g_sset: int = 20000
constant g_sreset: int = 5000
constant g_selfdestruct: int = 5000

constant g_create: int = 32000
constant g_codedeposit: int = 200
constant g_call: int = 700
constant g_callvalue: int = 9000
constant g_callstipend: int = 2300
constant g_newaccount: int = 25000
constant g_exp: int = 10
constant g_expbyte: int = 50
constant g_memory: int = 3
constant g_txcreate: int = 32000
constant g_txdatazero: int = 4
constant g_txdatanonzero: int = 68
constant g_transaction: int = 21000
constant g_log: int = 375
constant g_logdata: int = 8
constant g_logtopic: int = 375
constant g_sha3: int = 30
constant g_sha3word: int = 6
constant g_copy: int = 3
constant g_blockhash: int = 20
constant g_quaddivisor: int = 100


(* TODO Move to the preprocessor part: begin *)
(*

type program = {
  program_content : int -> option instruction; 
  program_length  : int; (* the length of the program in bytes *)
}

let inst_list_of_program(p: program) (idx: int): byte =
   match p.program_content idx with
   | None -> 0
   | Some instruction ->
      match List.nth 0 (inst_opcode inst) with
      | None -> 0
      | Some a -> a
      end
   end


(* Move to the preprocessor part: end *)
*)


(* Representation of the machine state part i.e. the volatile part *)
type machine_state = {
  mac_stack : stack ; (* In EVM definition, max length is 1024 *)
  mac_memory : memory;
  mac_pc : int;
  mac_status : vmstatus;
  mac_memory_usage : int; (* the current memory usage *) 
  mac_gas : int; (* the remaining gas *)
  mac_insts : list instruction;  (* Slight changes *)
  mac_jumpmap : int -> int
}



(* The result of a program execution is the results of its instructions contained in the program *)






(* Auxiliary functions for EVM instructions *)  

(* Auxiliary functions for memory *)
(* Memory initialization*)
(*
let empty_memo: memory = 
(fun a: machword -> None)
*)
(*
let rec update_memoContent (memo: memory) (idx: uint256) (cont: list memory_content) (n: int): memory 
requires {n >= 0} 
=   
match n with 
| 0 -> memo
| m + 1 -> 
   match cont with 
      | Nil -> memo
      | h :: t -> update_memoContent (fun addr -> if addr = idx then h else memo addr) (idx + 1) t m
        end
end

let rec read_memoContent (idx: uint256) (n: int) (memo: memory): list memory_content
    requires {n >= 0}
= match n with 
    | 0 -> Nil
    | m + 1 -> memo idx :: read_memoContent (idx + 1) m memo
  end
*)
(*
function read_memory (memo: memory) (idx: int) : memory_content
*)
let update_memory_content (m: memory) (idx: int) (cont: option memory_content): memory =
  fun addr -> if addr = idx then cont else (m addr)

(* Auxiliary functions for stack *)

let push_stack (s: stack) (ele: int): stack = Cons ele s
(*
let rec push_stack_lst (s: stack) (lst: list uint256) (idx: int): stack = 
if idx = 0 then s else (push_stack_lst (Cons lst[0] s) (tl lst) (idx - 1))
*)
let pop_stack (s: stack): (stack, option int)  = 
    match s with
    | Cons x t -> (t, Some x)
    | _ -> (s, None) 
    end

let rec fetch (lst: list int) (n: int): list int =
requires {0 <= n <= length(lst)}
variant{n}
if n > length(lst) || n = 0 then Nil else
match lst with 
| Nil -> Nil
| Cons x r -> Cons x (fetch r (n - 1))
end

let rec drop (lst: list int) (n: int): list int =
requires {0 <= n <= length(lst)}
if n = 0 then lst else
reverse (fetch (reverse lst) (length(lst)-n))


let swap_stack (s: stack) (i: int): (option stack) = 
match (nth 0 s, nth i s) with
| (Some ele_0, Some ele_i) -> Some ((Cons ele_i (fetch (drop s 1) (i-1))) ++ (Cons ele_0 (drop s i)))
| _, _ -> None
end




(* Machine state update *)

let update_stack (st: stack) (m: machine_state) : machine_state =
{ m with mac_stack = st }   

let update_memory (memo: memory) (m: machine_state) : machine_state =
{ m with mac_memory = memo }  

let update_pc (pc: int) (m: machine_state) : machine_state =
{ m with mac_pc = pc }   

let update_status (vst: vmstatus) (m: machine_state) : machine_state =
{ m with mac_status = vst }  

(* Auxiliay function for the slight change in machine state to get the opcodes *)

let inc_pc (m: machine_state): machine_state =
  update_pc (m.mac_pc + 1) m
(*
type machine_state = {
  mac_stack : stack ; (* In EVM definition, max length is 1024 *)
  mac_memory : memory;
  mac_pc : int;
  mac_status : vmstatus;
  mac_memory_usage : int; (* the current memory usage *) 
  mac_gas : int; (* the remaining gas *)
  mac_insts : list instruction;  (* Slight changes *)
  mac_jumpmap : uint256 -> int
}
*)



let get_inst (mac_st: machine_state): option instruction =
  match mac_st.mac_pc, mac_st.mac_insts with 
  | pc, insts -> (nth pc insts) 
  end

(* Transformation semantics for different insturctions *)

let interpreter: machine_state -> machine_state =
   fun m -> 
   let inst = get_inst m in
   match inst with 
    | Some (System STOP) -> {m with mac_status = (Finish (Normal ( 0)))}
    | Some (Arith ADD) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' (a' + b'); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end
    | Some (Arith MUL) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' (a' * b'); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end
    | Some (Arith SUB) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = (pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' (a' - b'); mac_pc = m.mac_pc + 1 }
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end

    | Some (Arith DIV) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' ( div a'  b'); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end  
    | Some (Arith MOD) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' ( mod a' b'); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end     
    | Some (Arith EXP) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' ( (power ( a') ( b'))); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end  
    | Some (Arith LT) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' (if a' < b' then 1 else  0 ); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end   
    | Some (Stack POP) -> let (st', a) = pop_stack (m.mac_stack) in 
                   match a with
                   | Some _ -> { m with mac_stack = st'; mac_pc = m.mac_pc + 1 } 
                   | None -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 } 
                   end
    | Some (Stack (PUSH a)) -> inc_pc { m with mac_stack = (push_stack m.mac_stack a) } 
    | Some (Dup i)     -> let ele = nth (i - 1) m.mac_stack in 
                  match ele with
                  | Some a -> { m with mac_stack = push_stack m.mac_stack a; mac_pc = m.mac_pc + 1 }
                  | None -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 }
                  end
    | Some (Swap i)    -> let s = (swap_stack m.mac_stack i) in 
                  match s with
                  | Some _s -> { m with mac_stack = _s; mac_pc = m.mac_pc + 1 }
                  | None  ->  { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 }
                  end
    | Some (Pc JUMP)    -> let (s', dest) = pop_stack m.mac_stack in 
                    match dest with 
                    | Some _dest -> {m with mac_stack = s'; mac_pc  = (m.mac_jumpmap _dest)}
                    | None -> { m with mac_status = (Error OutOfStack) } (* TODO confirm if pc update is needed *)
                    end
    | Some (Pc JUMPI)   -> let (s', dest) = pop_stack m.mac_stack in
                    let (s'', con) = pop_stack s' in
                    match dest, con with 
                    | Some _dest, Some _con -> 
                         if _con =  0 then inc_pc {m with mac_stack = s'' }
                         else { m with mac_pc = (m.mac_jumpmap _dest) } 
                    | _, _ -> { m with mac_status = (Error OutOfStack) } (* TODO confirm if pc update is needed *)
                    end
    | Some (Pc JUMPDEST) -> inc_pc m
    | Some (Memory MSTORE) -> let (s', offset) = pop_stack m.mac_stack in 
                       let (s'', cont) = pop_stack s' in
                       match offset, cont with
                       | Some o, Some c -> {m with mac_stack = s''; mac_memory = update_memory_content m.mac_memory o (Some (Item256 c)); mac_pc = m.mac_pc + 1} 
                       | _, _ -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 } 
                       end
    | Some (Memory MSTORE8) -> let (s', offset) = pop_stack m.mac_stack in 
                       let (s'', cont) = pop_stack s' in
                       match offset, cont with
                       | Some o, Some c -> {m with mac_stack = s''; mac_memory = update_memory_content m.mac_memory o (Some (Item8 c)); mac_pc = m.mac_pc + 1} 
                       | _, _ -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 } 
                       end
    | Some (Stack CALLDATALOAD) -> let (s', offset) = pop_stack m.mac_stack in
                       match offset with
                       | Some _ -> {m with mac_stack = push_stack s' 1; mac_pc = m.mac_pc + 1 } (* TODO : interaction with the environment data *)
                       | None -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 } 
                       | _ -> absurd
                       end
    (*| Some (Memory MLOAD) -> let (s', offset) = pop_stack m.mac_stack in
                        match offset with
                        | Some o -> {m with mac_stack = push_stack s' (read_memory m.mac_memory o) ; mac_pc = m.mac_pc + 1 }
                        | None -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 } 
                        end*)
    | _                 -> {m with mac_status = (Error InvalidOpcode)} 
    end

(* MLOAD CALLDATACOPY for memory *)
end