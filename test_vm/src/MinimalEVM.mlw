module UInt8
	use mach.int.Unsigned
	type uint8
	constant max_uint8: int = 0xff
	clone export mach.int.Unsigned with
		type t = uint8,
		constant max = max_uint8
end

module UInt4
	use mach.int.Unsigned
	type uint4
	constant max_uint4: int = 0xf
	clone export mach.int.Unsigned with
		type t = uint4,
		constant max = max_uint4
end

module UInt160
	use mach.int.Unsigned
	type uint160
	constant max_uint160: int = 0xffffffffffffffffffffffffffffffffffffffff
	clone export mach.int.Unsigned with
		type t = uint160,
		constant max = max_uint160
end

module UInt256
	use mach.int.Unsigned
	type uint256
	constant max_uint256: int = 0xffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff
	clone export mach.int.Unsigned with
		type t = uint256,
		constant max = max_uint256
end

module EVM

(* Focus on machine state transition: Program Counter, Stack Contents, Memory Contents, Storage, etc. *)

(* the library support *)
use array.Array
use int.Int (* Arithmetic *)
use int.Power
use list.ListRich (* combo theory that includes all list operations like length, reversal, and concatenation *)
use option.Option
use map.Map
use int.EuclideanDivision
use UInt256
use UInt160
use UInt8
use UInt4


(* Use clear alias for commonly-used type *)


(* 8-bit and 160-bit unsigned integers ([UInt8] and [UInt160]) *)
(* They can be transformed using to_int and of_int, which can be further encapsulated for other transformation between type *) 
(* Explicit type transformation, such as machword to address, machword to byte in each newly-built library,
will be encapsulated as a function through to_int and of_int *)
type byte = uint8
type address = uint160
type machword = uint256
(* memory: word addressed byte array *)
(* stack: list uint256 *)
(* storage: word addressed word array, maintained as part of the system state *)

(* Enumeration type*)
(* Both machword and byte can be saved to memory *)
(* type storage = map address machword *)

(* Enumeration type*)
type memory_content = 
   | Item8 uint256
   | Item256 uint256
type memory = map machword (option memory_content)
type stack = list uint256
type storage = map machword machword

(* VM status *)


type error =
    | OutOfBounds
    | OutOfGas
    | OutOfStack
    | OutOfCode
    | OutOfData
    | InvalidOpcode

type return_type =
  | Normal uint256
  | Create uint256
  | Revert

type vmstatus =
  | Running
  | Error error
  | Finish return_type

(* EVM instructions *)

(* Record the number of items required on the stack and returned to the stack for a given instruction *)
type st_num = (int, int)

(* Unsigned Arithmetics *)
type arith_inst =
| ADD
| MUL
| SUB
| DIV
| MOD
| ADDMOD (*  Modulo addition operation. *)
| MULMOD (*  Modulo multiplication operation. *)
| EXP (* Exponential operation. *)
| LT
| GT
| EQ
| ISZERO
| SHA3

let arith_inst_opcode (inst: arith_inst): int =
match inst with 
| ADD -> 0X01
| MUL -> 0X02
| SUB -> 0X03
| DIV -> 0X04
| MOD -> 0X06
| ADDMOD -> 0X08
| MULMOD -> 0X09
| EXP -> 0X0a
| LT -> 0X10
| GT -> 0X11
| EQ -> 0X14
| ISZERO -> 0X15
| SHA3 -> 0X20
end

let arith_inst_num (inst: arith_inst): st_num =
match inst with 
| ADD -> (2, 1)
| MUL -> (2, 1)
| SUB -> (2, 1)
| DIV -> (2, 1)
| MOD -> (2, 1)
| ADDMOD -> (3, 1)
| MULMOD -> (3, 1)
| EXP -> (2, 1)
| LT -> (2, 1)
| GT -> (2, 1)
| EQ -> (2, 1)
| ISZERO -> (1, 1)
| SHA3 -> (2, 1)
end
(* Signed Arithmetics *)
type sign_arith_inst =
| SDIV
| SMOD
| SLT
| SGT
| SIGNEXTEND (* Extend length of two's complement signed integer *)

let sign_arith_inst_opcode (inst: sign_arith_inst): int =
match inst with 
| SDIV -> 0X05 (*  Signed integer division operation (truncated) *)
| SMOD -> 0X07
| SLT -> 0X12
| SGT -> 0X13
| SIGNEXTEND -> 0X0b 
end   

let sign_arith_inst_num (inst: sign_arith_inst): st_num =
match inst with 
| SDIV -> (2, 1)
| SMOD -> (2, 1)
| SLT -> (2, 1)
| SGT -> (2, 1)
| SIGNEXTEND -> (2, 1)
end   
          


(* Bits *)
type bits_inst =
    | AND  
    | OR
    | XOR
    | NOT
    | BYTE (* Retrieve single byte from word *)


let bit_inst_opcode (inst: bits_inst): int =
    match inst with 
        | AND -> 0X16
        | OR -> 0X17
        | XOR -> 0X18
        | NOT -> 0X19
        | BYTE -> 0X1a
    end

let bit_inst_num (inst: bits_inst): st_num =
    match inst with 
        | AND -> (2, 1)
        | OR -> (2, 1)
        | XOR -> (2, 1)
        | NOT -> (1, 1)
        | BYTE -> (2, 1)
    end


(* Information *)
type info_inst =
| ADDRESS
| BALANCE
| ORIGIN (* Get execution origination address.*)
| CALLER
| CALLVALUE
| CALLDATASIZE
| CODESIZE
| GASPRICE (* Get price of gas in current environment *)
| EXTCODESIZE (* Size of the code of a specified account *)
| RETURNDATASIZE (* Get size of output data from the previous call from the current environment *)
| RETURNDATACOPY (* Copy output data from the previous call to memory *)
| BLOCKHASH (* Get the hash of one of the 256 most recent complete blocks. *)
| COINBASE (* Get the block’s beneficiary address. *)
| TIMESTAMP
| NUMBER
| DIFFICULTY (* Get the block's difficulty *)
| GASLIMIT (*  Get the block's gas limit *)
| GAS


let info_inst_opcode (inst: info_inst): int =
match inst with
| ADDRESS -> 0X30
| BALANCE -> 0X31
| ORIGIN -> 0X32
| CALLER -> 0X33
| CALLVALUE -> 0X34
| CALLDATASIZE -> 0X36
| CODESIZE -> 0X38
| GASPRICE -> 0X3a
| EXTCODESIZE -> 0X3b
| RETURNDATASIZE -> 0X3d
| RETURNDATACOPY -> 0X3e
| BLOCKHASH -> 0X40
| COINBASE -> 0X41 
| TIMESTAMP -> 0X42
| NUMBER -> 0X43
| DIFFICULTY -> 0X44
| GASLIMIT -> 0X45
| GAS -> 0X5a
end

let info_inst_num (inst: info_inst): st_num =
match inst with
| ADDRESS -> (0, 1)
| BALANCE -> (1, 1)
| ORIGIN -> (0, 1)
| CALLER -> (0, 1)
| CALLVALUE -> (0, 1)
| CALLDATASIZE -> (0, 1)
| CODESIZE -> (0, 1)
| GASPRICE -> (0, 1)
| EXTCODESIZE -> (1, 1)
| RETURNDATASIZE -> (0, 1)
| RETURNDATACOPY -> (3, 0)
| BLOCKHASH -> (1, 1)
| COINBASE -> (0, 1) 
| TIMESTAMP -> (0, 1)
| NUMBER -> (0, 1)
| DIFFICULTY -> (0, 1)
| GASLIMIT -> (0, 1)
| GAS -> (0, 1)
end

(* Memory Operations *)
type memory_inst =
| MLOAD (* Load word from memory *)
| MSTORE (* Save word to memory *)
| MSTORE8 (* Save byte to memory *)
| MSIZE (* the size of the currently used part of the memory *)
| CALLDATACOPY (* copy the caller's data to the memory *)
| CODECOPY (* copy part of the currently running code to the memory *)
| EXTCODECOPY (* copy part of the code of a specified account *)

let memory_inst_opcode (inst: memory_inst) : int =
match inst with 
| MLOAD -> 0X51 
| MSTORE -> 0X52 
| MSTORE8 -> 0X53 
| MSIZE -> 0X59 
| CALLDATACOPY -> 0X37 
| CODECOPY -> 0X39
| EXTCODECOPY -> 0X3c
end

let memory_inst_num (inst: memory_inst) : st_num =
match inst with 
| MLOAD -> (1, 1) 
| MSTORE -> (2, 0) 
| MSTORE8 -> (2, 0) 
| MSIZE -> (0, 1)
| CALLDATACOPY -> (3, 0) 
| CODECOPY -> (3, 0)
| EXTCODECOPY -> (4, 0)
end



(* Storage Operations *)
type storage_inst =
| SLOAD (*Load word from the storage *)
| SSTORE (* Save word to the storage *)

let storage_inst_opcode (inst: storage_inst): int = 
match inst with 
| SLOAD -> 0X54 
| SSTORE -> 0X55 
end

let storage_inst_num (inst: storage_inst): st_num = 
match inst with 
| SLOAD -> (1, 1)
| SSTORE -> (2, 0)
end

(*Program Counter Operation *)
type pc_inst =
 | JUMP (*  Alter the program counter. *)
 | JUMPI (* Conditionally alter the program counter. *)
 | PC (* the current location in the code *)
 | JUMPDEST (* indicate jump destinations. *)

let pc_inst_opcode (inst: pc_inst): int = 
match inst with
| JUMP -> 0X56
| JUMPI -> 0X57
| PC -> 0X58 
| JUMPDEST -> 0X5b
end

let pc_inst_num (inst: pc_inst): st_num = 
match inst with
| JUMP -> (1, 0)
| JUMPI -> (2, 0)
| PC -> (0, 1)
| JUMPDEST -> (0, 0)
end


(* Stack Operations *)
(* The PUSH instruction to be updated*)

type stack_inst =
  | POP (* Remove item from stack *)
  | PUSH machword (* pushing an element to the stack *) 
  (* | PUSH (list byte)  *)
  | CALLDATALOAD (* push a word to the stack which is taken from the caller's data *)

exception PushError
(* TODO int and uint8 issue *)

let stack_inst_opcode (inst: stack_inst): list int
raises {PushError -> False}
= match inst with
| POP -> Cons 0X50 Nil
(*| PUSH machword ->
     if 1 <= length(lst) <= 32 then ((Cons ((length lst) + 0X5f) Nil) ++ lst) else raise PushError 
     (* opcode of the operation ++ the pushed value list *)*)
| CALLDATALOAD -> Cons 0X35 Nil
| _ -> absurd
end

let stack_inst_num (inst: stack_inst): st_num = 
match inst with
| POP -> (1, 0)
| PUSH _ -> (0, 1)
| CALLDATALOAD -> (1, 1)
end

(* The 16 insts for duplicating a stack element, take a stack element and copy it on top of the stack *)
type dup_inst = uint4

let dup_inst_opcode (inst: dup_inst): int =
(UInt4.to_int inst + 0X80) 

let dup_inst_num (inst: dup_inst): st_num =
(UInt4.to_int inst, (UInt4.to_int inst) + 1 )

(* The 16 insts for taking a stack element and duplicate it on top of the stack.*)
type swap_inst = uint4

let swap_inst_opcode (inst: swap_inst): int =
  ((UInt4.to_int inst) + 0X90)

let swap_inst_num (inst: swap_inst): st_num =
((UInt4.to_int inst) + 1, (UInt4.to_int inst) + 1)

(* Logging Operations *)
(* The state change is to append an additional log entry on to the substate’s log series *)
type log_inst =
| LOG0
| LOG1
| LOG2
| LOG3
| LOG4

let log_inst_opcode (inst: log_inst): int = match inst with
| LOG0 -> 0Xa0
| LOG1 -> 0Xa1
| LOG2 -> 0Xa2
| LOG3 -> 0Xa3
| LOG4 -> 0Xa4
end

let log_inst_num (inst: log_inst): st_num = match inst with
| LOG0 -> (2, 0)
| LOG1 -> (3, 0)
| LOG2 -> (4, 0)
| LOG3 -> (5, 0)
| LOG4 -> (6, 0)
end

(* System Operations *)
type system_inst =
  | STOP (* finishing the execution normally, with the empty return data *)
  | CREATE (* deploying some code in an account *)
  | CALL (* calling (i.e. sending a message to) an account *)
  | CALLCODE (* calling into this account, but the executed code can be some other account's *)
  | RETURN (* finishing the execution normally with data *)
  | DELEGATECALL (* calling into this account, the executed code can be some other account's
                       but the sent value and the sent data are unchanged. *)
  | STATICCALL (* Static message-call into an account.*)
  | REVERT (* Halt execution reverting state changes but returning data and remaining gas. *)                      
  | SELFDESTRUCT (* send all remaining Eth balance to the specified account, *)
            (* finishing the execution normally, and flagging the current account for deletion *)

let system_inst_opcode (inst: system_inst): int = 
match inst with
| STOP -> 0X00
| CREATE -> 0Xf0
| CALL -> 0Xf1
| CALLCODE -> 0Xf2
| RETURN -> 0Xf3
| DELEGATECALL -> 0Xf4
| STATICCALL -> 0Xfa
| REVERT -> 0Xfd
| SELFDESTRUCT -> 0Xff
end

let system_inst_num (inst: system_inst): st_num = match inst with
| STOP         -> (0, 0)
| CREATE       -> (3, 1)
| CALL         -> (7, 1)
| CALLCODE     -> (7, 1)
| RETURN       -> (2, 0)
| DELEGATECALL -> (6, 1)
| STATICCALL   -> (6, 1)
| REVERT       -> (2, 0)
| SELFDESTRUCT -> (1, 0)
end

(* Instruction Set *)
(* The previous instruction sets above are here combined into the instruction type. *)

type instruction =
  | Invalid byte
  | Arith arith_inst  
  | Sarith sign_arith_inst
  | Bits bits_inst
  | Info info_inst
  | Memory memory_inst
  | Storage storage_inst
  | Pc pc_inst
  | Stack stack_inst
  | Dup dup_inst
  | Swap swap_inst
  | Log log_inst
  | System system_inst

let inst_opcode (inst: instruction): list int = 
match inst with
| Invalid byte -> Cons (UInt8.to_int byte) Nil
| Arith a -> Cons (arith_inst_opcode a) Nil
| Sarith s -> Cons (sign_arith_inst_opcode s) Nil
| Bits b -> Cons (bit_inst_opcode b) Nil
| Info i -> Cons (info_inst_opcode i) Nil
| Memory m -> Cons (memory_inst_opcode m) Nil
| Storage s -> Cons (storage_inst_opcode s) Nil
| Pc p -> Cons (pc_inst_opcode p) Nil
| Stack s -> stack_inst_opcode s
| Dup d -> Cons (dup_inst_opcode d) Nil
| Swap s -> Cons (swap_inst_opcode s) Nil
| Log l -> Cons (log_inst_opcode l) Nil
| System m -> Cons (system_inst_opcode m) Nil
end


let inst_stack_num (inst: instruction): st_num = match inst with
| Invalid _ -> (0, 0)
| Arith a -> arith_inst_num a
| Sarith s -> sign_arith_inst_num s
| Bits b -> bit_inst_num b
| Info i -> info_inst_num i
| Memory m -> memory_inst_num m
| Storage s -> storage_inst_num s
| Pc p -> pc_inst_num p
| Stack s -> stack_inst_num s
| Dup d -> dup_inst_num d
| Swap s -> swap_inst_num s
| Log l -> log_inst_num l
| System m -> system_inst_num m
end

(* Gas mechanism *)

constant g_zero: int = 0
constant g_base: int = 2
constant g_verylow: int = 3
constant g_low: int = 5
constant g_mid: int = 8
constant g_high: int = 10
constant g_extcode: int = 700 (* Amount of gas to pay for instruction of the set Wextcode *)


let gas_of_Wzero (inst: instruction) : int =
  match inst with
    | System STOP -> 0
    | System RETURN -> 0
    | System REVERT -> 0
    | _ -> absurd
    end

let gas_of_Wbase (inst: instruction) : int =
  match inst with
    | Info ADDRESS -> 2
    | Info ORIGIN -> 2
    | Info CALLER -> 2
    | Info CALLVALUE -> 2
    | Info CALLDATASIZE -> 2
    | Info CODESIZE -> 2
    | Info GASPRICE -> 2
    | Info COINBASE -> 2
    | Info TIMESTAMP -> 2
    | Info NUMBER -> 2
    | Info DIFFICULTY -> 2
    | Info GASLIMIT -> 2
    | Info RETURNDATASIZE -> 2
    | Stack POP -> 2
    | Pc PC -> 2
    | Memory MSIZE -> 2
    | Info GAS -> 2
    | _ -> absurd
    end

let gas_of_Wlow (inst: instruction) : int =
  match inst with
    | Arith MUL -> 5
    | Arith DIV -> 5
    | Sarith SDIV -> 5
    | Arith MOD -> 5
    | Sarith SMOD -> 5
    | Sarith SIGNEXTEND -> 5
    | _ -> absurd
    end
  

constant g_balance: int = 400
constant g_sload: int = 200
constant g_jumpdest: int = 1
constant g_sset: int = 20000
constant g_sreset: int = 5000
constant g_selfdestruct: int = 5000

constant g_create: int = 32000
constant g_codedeposit: int = 200
constant g_call: int = 700
constant g_callvalue: int = 9000
constant g_callstipend: int = 2300
constant g_newaccount: int = 25000
constant g_exp: int = 10
constant g_expbyte: int = 50
constant g_memory: int = 3
constant g_txcreate: int = 32000
constant g_txdatazero: int = 4
constant g_txdatanonzero: int = 68
constant g_transaction: int = 21000
constant g_log: int = 375
constant g_logdata: int = 8
constant g_logtopic: int = 375
constant g_sha3: int = 30
constant g_sha3word: int = 6
constant g_copy: int = 3
constant g_blockhash: int = 20
constant g_quaddivisor: int = 100


(* Representation of the machine state *)
type machine_state = {
  mac_stack : stack ; (* In EVM definition, max length is 1024 *)
  mac_memory : memory;
  mac_storage : storage;
  mac_pc : int;
  mac_status : vmstatus;
  mac_memory_usage : int; (* the current memory usage *) 
  mac_gas : int; (* the remaining gas *)
  mac_insts : list instruction;  
  mac_jumpmap : map uint256 int
}



(* Auxiliary functions for EVM instructions *)  

(* Auxiliary functions for stack *)

let push_stack (s: stack) (ele: machword): stack = Cons ele s

(* let rec push_stack_lst (s: stack) (lst: list machword) (idx: int): stack = 
if idx = 0 then s 
else (push_stack_lst (Cons lst[0] s) (tl lst) (idx - 1)) *)

let pop_stack (s: stack): (stack, option machword)  = 
    match s with
    | Cons x t -> (t, Some x)
    | _ -> (s, None) 
    end

let rec fetch (lst: list machword) (n: int): list machword =
requires {0 <= n <= length(lst)}
variant{n}
if n > length(lst) || n = 0 then Nil else
match lst with 
| Nil -> Nil
| Cons x r -> Cons x (fetch r (n - 1))
end

let rec drop (lst: list machword) (n: int): list machword =
requires {0 <= n <= length(lst)}
if n = 0 then lst else
reverse (fetch (reverse lst) (length(lst)-n))


let swap_stack (s: stack) (i: int): (option stack) = 
requires{i >= 2}
match (nth 0 s, nth (i-1) s) with
| (Some ele_0, Some ele_i_prev) -> Some ((Cons ele_i_prev (fetch (drop s 1) (i-2))) ++ (Cons ele_0 (drop s i)))
| _, _ -> None
end


(* Auxiliary functions for memory *)
let update_memory_content (m: memory) (idx: uint256) (cont: option memory_content): memory =
   fun addr -> if addr = idx then cont else (m addr)
(* Auxiliary functions for Storage *)
let update_storage_from_address storage (addr: uint256) (v: uint256): storage =
  (* let addr = UInt160.of_int (UInt256.to_int addr) in *)
 fun (a: uint256) -> if a = addr then v else storage a



(* Machine state update *)

let update_stack (st: stack) (m: machine_state) : machine_state =
{ m with mac_stack = st }   

let update_memory (memo: memory) (m: machine_state) : machine_state =
{ m with mac_memory = memo }  

let update_pc (pc: int) (m: machine_state) : machine_state =
{ m with mac_pc = pc }   

let update_status (vst: vmstatus) (m: machine_state) : machine_state =
{ m with mac_status = vst }  

(* Auxiliay function for the slight change in machine state to get the instructions *)

let inc_pc (m: machine_state): machine_state =
  update_pc (m.mac_pc + 1) m

let get_inst (mac_st: machine_state): option instruction =
  match mac_st.mac_pc, mac_st.mac_insts with 
  | pc, insts -> (nth pc insts) 
  | _, Nil -> None
  end

(* Transition effect for the insturctions *)

let interpreter: machine_state -> machine_state =
   fun m -> 
   let inst = get_inst m in
   match inst with 
    | Some (System STOP) -> {m with mac_status = (Finish (Normal (UInt256.of_int 0)))}
    | Some (Arith ADD) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with
                       mac_stack = push_stack st'' (a' + b');
                       mac_pc = m.mac_pc + 1;
                       mac_gas = m.mac_gas - 3;
                       }
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end
    | Some (Arith MUL) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {
                       m with mac_stack = push_stack st'' (a' * b');
                       mac_pc = m.mac_pc + 1;
                       mac_gas = m.mac_gas - 5;
                       }
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end
    | Some (Arith SUB) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = (pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {
                       m with mac_stack = push_stack st'' (a' - b');
                       mac_pc = m.mac_pc + 1;
                       mac_gas = m.mac_gas - 3;
                       }
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end

    | Some (Arith DIV) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' ( a' / b'); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end  
    | Some (Sarith SDIV) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> let _a = (UInt256.to_int a') in 
                                        let _b = (UInt256.to_int b') in 
                                        if _b = 0 then {m with mac_stack = push_stack st'' (UInt256.of_int 0); mac_pc = m.mac_pc + 1}
                                        else 
                                          if _a =  -(power 2 255) && _b = -1 then {m with mac_stack = push_stack st'' (UInt256.of_int (-(power 2 255))); mac_pc = m.mac_pc + 1}
                                          else 
                                             (if _a > 0 then 
                                                   (if _b > 0 then {m with mac_stack = push_stack st'' (UInt256.of_int ( div _a _b)); mac_pc = m.mac_pc + 1} 
                                                    else {m with mac_stack = push_stack st'' (UInt256.of_int (-1 * (div _a (-1 * _b)))); mac_pc = m.mac_pc + 1} ) 
                                              else 
                                                   (if _b > 0 then {m with mac_stack = push_stack st'' (UInt256.of_int (-1 * (div (-1 * _a) _b))); mac_pc = m.mac_pc + 1 } 
                                                   else {m with mac_stack = push_stack st'' (UInt256.of_int ( div (-1 * _a) (-1 * _b))); mac_pc = m.mac_pc + 1})
                                             )
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end  
    
    | Some (Arith MOD) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' ( a' % b'); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end   
    | Some (Sarith SMOD) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> let _a = (UInt256.to_int a') in 
                                        let _b = (UInt256.to_int b') in 
                                        if _b = 0 then {m with mac_stack = push_stack st'' (UInt256.of_int 0); mac_pc = m.mac_pc + 1}
                                        else                               
                                            if _a > 0 then 
                                                   (if _b > 0 then {m with mac_stack = push_stack st'' (UInt256.of_int ( mod _a _b)); mac_pc = m.mac_pc + 1} 
                                                    else {m with mac_stack = push_stack st'' (UInt256.of_int (-1 * (mod _a (-1 * _b)))); mac_pc = m.mac_pc + 1} ) 
                                            else 
                                                   (if _b > 0 then {m with mac_stack = push_stack st'' (UInt256.of_int (-1 * (mod (-1 * _a) _b))); mac_pc = m.mac_pc + 1} 
                                                   else {m with mac_stack = push_stack st'' (UInt256.of_int ( mod (-1 * _a) (-1 * _b))); mac_pc = m.mac_pc + 1})
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end  
    | Some (Arith ADDMOD) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   let (st''', c) = (pop_stack st'') in 
                   match a, b, c with 
                   | Some a', Some b', Some c' -> let _a = UInt256.to_int a' in 
                                            let _b = UInt256.to_int b' in
                                            let _c = UInt256.to_int c' in 
                                            if _c = 0 then {m with mac_stack = push_stack st''' (UInt256.of_int 0); mac_pc = m.mac_pc + 1}
                   else {m with
                       mac_stack = push_stack st''' (UInt256.of_int ( mod (_a + _b) _c));
                       mac_pc = m.mac_pc + 1;
                       mac_gas = m.mac_gas - 8;
                       }
                   | _, _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end  
    | Some (Arith MULMOD) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   let (st''', c) = (pop_stack st'') in 
                   match a, b, c with 
                   | Some a', Some b', Some c' -> let _a = UInt256.to_int a' in 
                                            let _b = UInt256.to_int b' in
                                            let _c = UInt256.to_int c' in 
                                            if _c = 0 then {m with mac_stack = push_stack st''' (UInt256.of_int 0); mac_pc = m.mac_pc + 1}
                   else {m with mac_stack = push_stack st''' (UInt256.of_int ( mod (_a * _b) _c)); mac_pc = m.mac_pc + 1}
                   | _, _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end  
    | Some (Arith EXP) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' (UInt256.of_int (power (UInt256.to_int a') (UInt256.to_int b'))); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end  
    | Some (Arith LT) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' (if a' < b' then (UInt256.of_int 1) else (UInt256.of_int 0) ); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end   
    | Some (Arith GT) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> {m with mac_stack = push_stack st'' (if a' > b' then (UInt256.of_int 1) else (UInt256.of_int 0) ); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end
    | Some (Storage SSTORE) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                  let (st'', b) = ( pop_stack st') in 
                  match a, b with 
                  | Some a', Some b' -> {m with
                                            mac_storage = update_storage_from_address m.mac_storage a' b';
                                            mac_stack = st'';
                                            mac_pc = m.mac_pc + 1;
                                            mac_gas = m.mac_gas - (if a' = (UInt256.of_int 0) && b' <> (UInt256.of_int 0) then 20000 else 5000);
                                            }
                  | _, _ -> {m with
                                mac_status = (Error OutOfStack);
                                mac_pc = m.mac_pc + 1;
                                }
                  end
    | Some (Sarith SLT) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> let _a = UInt256.to_int a' in 
                                     let _b = UInt256.to_int b' in 
                    {m with mac_stack = push_stack st'' (if _a < _b then (UInt256.of_int 1) else (UInt256.of_int 0) ); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end   
    | Some (Sarith SGT) -> let (st', a) = (pop_stack (m.mac_stack)) in 
                   let (st'', b) = ( pop_stack st') in 
                   match a, b with 
                   | Some a', Some b' -> let _a = UInt256.to_int a' in 
                                     let _b = UInt256.to_int b' in 
                    {m with mac_stack = push_stack st'' (if _a > _b then (UInt256.of_int 1) else (UInt256.of_int 0) ); mac_pc = m.mac_pc + 1}
                   | _, _ -> {m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1}
                   end  
    | Some (Stack POP) -> let (st', a) = pop_stack (m.mac_stack) in 
                   match a with
                   | Some _ -> { m with mac_stack = st'; mac_pc = m.mac_pc + 1 } 
                   | None -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 } 
                   end
    | Some (Stack (PUSH a)) -> inc_pc { m with
                                          mac_stack = (push_stack m.mac_stack a);
                                          mac_gas = m.mac_gas - 3;
                                          } 
    | Some (Dup i)     -> let ele = nth (UInt4.to_int(i) - 1) m.mac_stack in 
                  match ele with
                  | Some a -> { m with mac_stack = push_stack m.mac_stack a; mac_pc = m.mac_pc + 1 }
                  | None -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 }
                  end
    | Some (Swap i)    -> let s = (swap_stack m.mac_stack (UInt4.to_int i)) in 
                  match s with
                  | Some _s -> { m with mac_stack = _s; mac_pc = m.mac_pc + 1 }
                  | None  ->  { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 }
                  end
    | Some (Pc JUMP)    -> let (s', dest) = pop_stack m.mac_stack in 
                    match dest with 
                    | Some _dest -> {m with mac_stack = s'; mac_pc  = (m.mac_jumpmap _dest)}
                    | None -> { m with mac_status = (Error OutOfStack) } (* TODO confirm if pc update is needed *)
                    end
    | Some (Pc JUMPI)   -> let (s', dest) = pop_stack m.mac_stack in
                    let (s'', con) = pop_stack s' in
                    match dest, con with 
                    | Some _dest, Some _con -> 
                         if _con = UInt256.of_int 0 then inc_pc {m with mac_stack = s'' }
                         else { m with mac_pc = (m.mac_jumpmap _dest) } 
                    | _, _ -> { m with mac_status = (Error OutOfStack) } (* TODO confirm if pc update is needed *)
                    end
    | Some (Pc JUMPDEST) -> inc_pc m
    | Some (Memory MSTORE) -> let (s', offset) = pop_stack m.mac_stack in 
                       let (s'', cont) = pop_stack s' in
                       match offset, cont with
                       | Some o, Some c -> {m with mac_stack = s''; mac_memory = update_memory_content m.mac_memory o (Some (Item256 c)); mac_pc = m.mac_pc + 1} 
                       | _, _ -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 } 
                       end
    | Some (Memory MSTORE8) -> let (s', offset) = pop_stack m.mac_stack in 
                       let (s'', cont) = pop_stack s' in
                       match offset, cont with
                       | Some o, Some c -> {m with mac_stack = s''; mac_memory = update_memory_content m.mac_memory o (Some (Item8 c)); mac_pc = m.mac_pc + 1} 
                       | _, _ -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 } 
                       end
    | Some (Stack CALLDATALOAD) -> let (s', offset) = pop_stack m.mac_stack in
                       match offset with
                       | Some _ -> {m with mac_stack = push_stack s' (UInt256.of_int 1); mac_pc = m.mac_pc + 1 } (* TODO : interaction with the environment data *)
                       | None -> { m with mac_status = (Error OutOfStack); mac_pc = m.mac_pc + 1 } 
                       | _ -> absurd
                       end
    | _                 -> {m with mac_status = (Error InvalidOpcode)} 
    end


end
